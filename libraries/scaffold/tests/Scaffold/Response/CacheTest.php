<?php

require_once __DIR__.'/../../_init.php';

/**
 * Test class for Scaffold_Response_Cache.
 * Generated by PHPUnit on 2010-04-06 at 20:56:42.
 */
class Scaffold_Response_CacheTest extends PHPUnit_Framework_TestCase
{
	public function testGetModifiedSince()
	{
		$_SERVER['HTTP_IF_MODIFIED_SINCE'] = strtotime(10);
		
		// Should return the same time
		$cache = new Scaffold_Response_Cache;
		$this->assertEquals($cache->get_modified_since(),strtotime(10));
	}
	
	/**
     * @depends testGetModifiedSince
     */
    public function testIE6ModifiedSince()
    {
    	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = strtotime(10) . '; length=100';

		// Cache should be valid as the headers match
		$cache = new Scaffold_Response_Cache;
		$this->assertEquals($cache->get_modified_since(),strtotime(10));
    }
	
	/**
	 * @depends testGetModifiedSince
	 */
	public function testGetEtags()
	{
		$_SERVER['HTTP_IF_NONE_MATCH'] = '"foo"';
		
		// Should return an array with 1 value
		$cache = new Scaffold_Response_Cache;
		$this->assertEquals($cache->get_etag(),'foo');
	}

	/**
	 * @depends testGetEtags
	 */
    public function testValidNoCache()
    {
    	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = null;
    	$_SERVER['HTTP_IF_NONE_MATCH'] = null;
    	
    	// Cache should be invalid, as the header haven't been sent
    	$cache = new Scaffold_Response_Cache;
    	$valid = $cache->valid(strtotime(10),'foo');  
    	$this->assertFalse($valid);
    }
    
    /**
     * @depends testValidNoCache
     */
    public function test_OldModified_CurrentEtag()
    {
    	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = strtotime(100);
    	$_SERVER['HTTP_IF_NONE_MATCH'] = 'foo';
    	
    	// Cache should be invalid
    	$cache = new Scaffold_Response_Cache;
    	$valid = $cache->valid(strtotime(1000),'foo');  
    	$this->assertFalse($valid);
    }
    
    /**
     * @depends test_OldModified_CurrentEtag
     */
    public function test_OldModified_OldEtag()
    {
    	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = strtotime(100);
    	$_SERVER['HTTP_IF_NONE_MATCH'] = 'foo';
    	
    	// Cache should be invalid
    	$cache = new Scaffold_Response_Cache;
    	$valid = $cache->valid(strtotime(1000),'bar');  
    	$this->assertFalse($valid);
    }
  
    /**
     * @depends test_OldModified_OldEtag
     */
    public function test_CurrentModified_OldEtag()
    {
    	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = strtotime(100);
    	$_SERVER['HTTP_IF_NONE_MATCH'] = 'foo';
    	
    	// Cache should be invalid
    	$cache = new Scaffold_Response_Cache;
    	$valid = $cache->valid(strtotime(100),'bar');  
    	$this->assertFalse($valid);
    }
    
    /**
     * @depends test_CurrentModified_OldEtag
     */
    public function testValidCache()
    {
    	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = strtotime(10);
    	$_SERVER['HTTP_IF_NONE_MATCH'] = 'foo';

		// Cache should be valid as the headers match
		$cache = new Scaffold_Response_Cache;
		$valid = $cache->valid(strtotime(10),'foo');
    	$this->assertTrue($valid);
    }
}
